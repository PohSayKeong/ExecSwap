/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface ExecSwapInterface extends Interface {
    getFunction(nameOrSignature: "commitmentOf" | "commitments" | "depositAndCommit" | "isCommitmentSpent" | "isCommitmentStored" | "owner" | "renounceOwnership" | "spent" | "transferOwnership" | "updateCommitment" | "withdraw"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CommitmentsUpdated" | "Deposit" | "OwnershipTransferred" | "Withdraw"): EventFragment;

    encodeFunctionData(functionFragment: 'commitmentOf', values: [BigNumberish, AddressLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'commitments', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'depositAndCommit', values: [AddressLike, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'isCommitmentSpent', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'isCommitmentStored', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'spent', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'updateCommitment', values: [BytesLike[], BytesLike[]]): string;
encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish[], AddressLike, BytesLike[], BytesLike, AddressLike]): string;

    decodeFunctionResult(functionFragment: 'commitmentOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'commitments', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'depositAndCommit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isCommitmentSpent', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isCommitmentStored', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'spent', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateCommitment', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  }

  
    export namespace CommitmentsUpdatedEvent {
      export type InputTuple = [added: BytesLike[], removed: BytesLike[]];
      export type OutputTuple = [added: string[], removed: string[]];
      export interface OutputObject {added: string[], removed: string[] };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DepositEvent {
      export type InputTuple = [from: AddressLike, token: AddressLike, amount: BigNumberish, ownerhash: BytesLike, commitmentHash: BytesLike];
      export type OutputTuple = [from: string, token: string, amount: bigint, ownerhash: string, commitmentHash: string];
      export interface OutputObject {from: string, token: string, amount: bigint, ownerhash: string, commitmentHash: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WithdrawEvent {
      export type InputTuple = [to: AddressLike, token: AddressLike, amount: BigNumberish, ownerhash: BytesLike];
      export type OutputTuple = [to: string, token: string, amount: bigint, ownerhash: string];
      export interface OutputObject {to: string, token: string, amount: bigint, ownerhash: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface ExecSwap extends BaseContract {
    
    connect(runner?: ContractRunner | null): ExecSwap;
    waitForDeployment(): Promise<this>;

    interface: ExecSwapInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    commitmentOf: TypedContractMethod<
      [amount: BigNumberish, token: AddressLike, ownerhash: BytesLike, ],
      [string],
      'view'
    >
    

    
    commitments: TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    depositAndCommit: TypedContractMethod<
      [token: AddressLike, amount: BigNumberish, ownerhash: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    isCommitmentSpent: TypedContractMethod<
      [commitment: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    isCommitmentStored: TypedContractMethod<
      [commitment: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    spent: TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    updateCommitment: TypedContractMethod<
      [newCommitments: BytesLike[], nullifyCommitments: BytesLike[], ],
      [void],
      'nonpayable'
    >
    

    
    withdraw: TypedContractMethod<
      [amounts: BigNumberish[], token: AddressLike, ownerhashes: BytesLike[], ownerPk: BytesLike, to: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'commitmentOf'): TypedContractMethod<
      [amount: BigNumberish, token: AddressLike, ownerhash: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'commitments'): TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'depositAndCommit'): TypedContractMethod<
      [token: AddressLike, amount: BigNumberish, ownerhash: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'isCommitmentSpent'): TypedContractMethod<
      [commitment: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isCommitmentStored'): TypedContractMethod<
      [commitment: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'spent'): TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateCommitment'): TypedContractMethod<
      [newCommitments: BytesLike[], nullifyCommitments: BytesLike[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdraw'): TypedContractMethod<
      [amounts: BigNumberish[], token: AddressLike, ownerhashes: BytesLike[], ownerPk: BytesLike, to: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'CommitmentsUpdated'): TypedContractEvent<CommitmentsUpdatedEvent.InputTuple, CommitmentsUpdatedEvent.OutputTuple, CommitmentsUpdatedEvent.OutputObject>;
getEvent(key: 'Deposit'): TypedContractEvent<DepositEvent.InputTuple, DepositEvent.OutputTuple, DepositEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Withdraw'): TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;

    filters: {
      
      'CommitmentsUpdated(bytes32[],bytes32[])': TypedContractEvent<CommitmentsUpdatedEvent.InputTuple, CommitmentsUpdatedEvent.OutputTuple, CommitmentsUpdatedEvent.OutputObject>;
      CommitmentsUpdated: TypedContractEvent<CommitmentsUpdatedEvent.InputTuple, CommitmentsUpdatedEvent.OutputTuple, CommitmentsUpdatedEvent.OutputObject>;
    

      'Deposit(address,address,uint256,bytes32,bytes32)': TypedContractEvent<DepositEvent.InputTuple, DepositEvent.OutputTuple, DepositEvent.OutputObject>;
      Deposit: TypedContractEvent<DepositEvent.InputTuple, DepositEvent.OutputTuple, DepositEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Withdraw(address,address,uint256,bytes32)': TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;
      Withdraw: TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;
    
    };
  }